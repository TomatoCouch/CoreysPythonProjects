#Will C.
#Python 1
#Unit 3, Mod 3.1

#Task 1
# [ ] Write an expression to raise a `ModuleNotFoundError` exception
#from totallyRealModule import totallyRealFunction
# [ ] Write an expression to raise an `ImportError` exception
#from math import pie

#Task 2
# [ ] The following program adds `lst1` to `lst2` element by element 
# Find all exceptions that will be generated by this program, 
# then handle the exceptions by displaying meaningful messages. 
# You should also handle unexpected exceptions. 
lst1 = [-4, -5,   6,   [6], "hello"] 
lst2 = [ 5, 16, [6], "hello", "goodbye"] 
for i in range(7): 
    try:
        print(lst1[i] + lst2[i]) 
    except TypeError:
        print("Items cannot be added")
    except IndexError:
        print("Index out of range.")
    except Exception as uhOh:
        print(uhOh)
print("Done!") 
# [ ] The following program asks the user for an integer then prints the result of dividing it by 2. 
# If the user enters an invalid value (i.e. "4.3" or "Hello"), the program terminates. 
# Use exception handling to deal with unexpected user input and display a meaningful message. 
x = input("Enter an integer: ") 
try: 
    x = int(x)
except ValueError:
    print("Not an integer.")
try:
    print("{:d} / 2 = {:.2f}".format(x, x / 2)) 
except TypeError:
        print("Not an integer.")
print("Done!")

#Task 3
# [ ] The following program asks the user for an integer `x` then assigns `y` as the result of dividing `x` by 2. 
# If the user enters an invalid value (i.e. "4.3" or "Hello"), the program terminates. 
# Use exception handling to deal with unexpected user inputs, then use an `else` clause to calculate the value of `y`. 
x = input("Enter an integer: ") 
y = None 
try:
    x = int(x) 
except Exception as uhOh:
    print(uhOh)
else:
    y = x / 2; 
if y is not None: 
    print("No exceptions were raised, you can use y =", y) 
else: 
    print("An exception was raised, y cannot be used")
# [ ] The following program tries to write to a file opened for reading. 
# The program will terminate before closing the file, and the file resources will not be released. 
# Use exception handling with a `finally` clause to make sure the file is closed. 
# Open a text file for reading 
f = open("text_file.txt", 'r')
# Try to write to a file open for reading (will raise an exception) 
try:
    f.write("This string will not be written")
except Exception as uhOh:
    print(uhOh)
# Close the file (will not be reached if an exception was raised)
finally:
    f.close() 
    print("File closed")

#Task 4
# [ ] Write a program to keep prompting the user for an odd positive number until a valid number is entered. 
# Your program should raise an exception with an appropriate message if the input is not valid.
while True:
    try:
        num=int(input("Enter an odd positive number. "))
    except Exception as uhOh:
        print(uhOh)
    else:
        try:
            if num%2==1:
                if num>0:
                    break
                else:
                    print("Negative number.")
            else:
                print("Even number.")
        except Exception as uhOh:
            print(uhOh)
# [ ] Complete the function `isValid` to test the validity of a user input. A valid input should be an odd positive integer. 
# The function should raise an exception with an appropriate message if the input is not valid. 
# The function need not handle the exception.
valid = False 
def isValid(num):
    try:
        num=int(input("Enter an odd positive number. "))
    except Exception as uhOh:
        print(uhOh)
    else:
        try:
            if num%2==1:
                if num>0:
                    valid=True
                else:
                    valid=False
            else:
                valid=False
        except Exception as uhOh:
            print(uhOh)
    return valid
while not valid: 
    try: 
        x = int(input("Enter an odd positive number: "))
        x = isValid(x) 
        valid = True 
    except ValueError as except_object: 
        print("{}".format(except_object)) 
print("{:d} was accepted".format(x)) 